#!/bin/bash
# 
# 

no_op="false"

usage() {
    echo "Usage:"
    echo "$0 [-n|--noop] <src-repo> [src-repo ...] <dst-repo>"
}

find_repo_base() {
    input_dir=$1
    input_dir=$(cd $input_dir; pwd)

    if [ -d $input_dir/.git ]; then
        git_base_dir=$input_dir
    else
        git_base_dir=$(cd $input_dir; git rev-parse --git-dir)
        git_base_dir=$(dirname $git_base_dir)/
    fi

    echo $git_base_dir
}

find_sub_dir() {
    input_dir=$1
    input_dir=$(cd $input_dir; pwd)

    if [ -d $input_dir/.git ]; then
        git_base_dir=$input_dir
    else
        git_base_dir=$(cd $input_dir; git rev-parse --git-dir)
        git_base_dir=$(dirname $git_base_dir)/
    fi

    sub_dir=${input_dir/$git_base_dir}

    echo $sub_dir
}

find_deletes() {
    git whatchanged -1 | grep -e '^:' | awk '$5 == "D" { print $6 }'
}

if [ $# -lt 2 ]; then
    usage >&2
    exit 1
fi

while [ $# -gt 1 ]; do
    if [ "$1" == "-n" -o "$1" == "--noop" ]; then
        no_op="true"
        shift
        continue
    fi

    if [ "$1" == "-h" -o "$1" == "--help" ]; then
        usage
        exit
    fi

    src_repos="$src_repos $1"
    shift
done
dst_repo=$(find_repo_base $1)
sub_dir=$(find_sub_dir $1)

# Check destination is a git repo
if ! (cd $dst_repo; git status > /dev/null 2>&1); then
    echo "$dst_repo is not a git repository - initialise it!"
    exit 1
fi

# Chech each source is a git repo
for src_repo in $src_repos; do
    if [ ! -d $src_repo/.git ]; then
        echo "$src_repo is not a git repository - what do you expect me to do?"
        exit 1
    fi
done

temp_file=$(mktemp)

# For each source repo extract commit info
for src_repo in $src_repos; do
    pushd $src_repo > /dev/null
        git checkout master
        (git log --pretty=format:'%at %H %s'; echo) | while read time hash subject; do
            echo $time $hash $src_repo $subject >> $temp_file
        done
    popd > /dev/null
done

if [ "$no_op" == "true" ]; then
    sort $temp_file
    rm $temp_file
    exit
fi

# Sort all commits by commit date/time, apply and merge
message_file=$(mktemp)

sort $temp_file | while read time hash src_repo subject; do
    pushd $src_repo > /dev/null
    git checkout $hash
    git log --pretty=format:'%B' -1 > $message_file
    author=$(git log --pretty=format:'%aN <%aE>' -1)
    cp -a * $dst_repo/$sub_dir
    deletes=$(find_deletes)
    popd > /dev/null

    pushd $dst_repo > /dev/null
    if [ -n "$deletes" ]; then
        for file in $deletes; do
            git rm $sub_dir$file
        done
    fi
    find . -path ./.git -prune -o -type f -print0 | xargs -0 git add
    git commit --date=$time --author="$author" -F $message_file
    popd > /dev/null
done

rm $message_file
rm $temp_file
